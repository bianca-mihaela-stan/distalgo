import da
import sys
import random
import os
f = open(r'/home/bianca/distAlgo/distalgo/da/examples/MIS/graph3.txt')
f2 = open('/home/bianca/distAlgo/distalgo/da/examples/MIS/found_mis.txt', "a")

mis_list = []

class P(process):
    def setup(index: int, neighbors_indexes: tuple, neighbors_process_ids: tuple):
        self.index = index
        self.neighbors_indexes = list(neighbors_indexes)
        self.neighbors_process_ids = list(neighbors_process_ids)
        self.MIS = 'NOT DECIDED'
        self.neighbors_neighbors_numbers = []
        self.MIS_neighbors_numbers = []
        self.neighbors_in_mis_state = {key: None for key in self.neighbors_indexes}
        self.neighbors_not_in_mis_state = {key: None for key in self.neighbors_indexes}

    def run():
        while self.MIS == 'NOT DECIDED':
            self.neighbors_neighbors_numbers = []
            self.MIS_neighbors_numbers = []
            self.neighbors_in_mis_state = {key: None for key in self.neighbors_indexes}
            self.neighbors_not_in_mis_state = {key: None for key in self.neighbors_indexes}
            random_choice_MIS()
        end(self)
        
    def random_choice_MIS():
        # each node makes a choice about wether they are in the MIS or no
        if len(self.neighbors_indexes) == 0:
            self.MIS = 'IN MIS'
            mis_list.append(self.index)
        else:
            self.MIS = random.choices(['IN MIS', 'NOT IN MIS'], weights=[(1 / len(self.neighbors_indexes)), (1 - (1 / len(self.neighbors_indexes)))])[0]

            # each node sends info to his neighbors
            send(('neighbors', len(self.neighbors_indexes), self.MIS), to=self.neighbors_process_ids)

            # each node waits for info from each of his neighbors
            await(len(self.neighbors_neighbors_numbers) == len(self.neighbors_process_ids))

            # phase 4: each node checks if he has the most neighbors
            if self.MIS == 'IN MIS':
                x = True
                for y in self.MIS_neighbors_numbers:
                    if len(self.neighbors_indexes) <= y:
                        x = False
                if x == False:
                    self.MIS = "NOT DECIDED"
                
            if self.MIS == 'IN MIS':
                output(f"node {self.index} is in the MIS")
                mis_list.append(self.index)
                
            # notify all neighbors wether i am in the mis or not
            send(('i am in the mis', self.index, True if self.MIS == 'IN MIS' else False), to = self.neighbors_process_ids)
            
            # wait for all of my neighbors to tell me if they are in the mis or not
            await(all(x != None for x in self.neighbors_in_mis_state.values()))
            
            if self.MIS == 'IN MIS' and any(x == True for x in self.neighbors_in_mis_state.values()):
                output(f"A GRAVE MISTAKE HAS BEEN MADE both {self.index} and {self.neighbors_in_mis_state.items()}")
            
            self.MIS = 'NOT IN MIS' if any(x == True for x in self.neighbors_in_mis_state.values()) else 'NOT DECIDED'
            
            # notify all of my neighbors wether i am NOT in the mis or not
            send(('i am not in the mis', self.index, True if self.MIS == 'NOT IN MIS' else False), to = self.neighbors_process_ids)
            
            await(all(x != None for x in self.neighbors_not_in_mis_state.values()))
            
            for (key,value) in self.neighbors_not_in_mis_state.items():
                if value == True:
                    remove_index = self.neighbors_indexes.index(key)
                    self.neighbors_indexes.pop(remove_index)
                    self.neighbors_process_ids.pop(remove_index)
            
    def receive(msg = ('neighbors', nr, mis)):
        self.neighbors_neighbors_numbers.append(nr)
        if mis == 'IN MIS':
            self.MIS_neighbors_numbers.append(nr)
            
    def receive(msg = ('i am in the mis', index, bool)):
        self.neighbors_in_mis_state[index] = bool
            
    def receive(msg = ('i am not in the mis', index, bool)):
        self.neighbors_not_in_mis_state[index] = bool
        

def main():
    dict = {}
    line = f.readline()
    # indexing the nodes with 1
    n = 1
    while line:
        line = line.strip("\n")
        list = line.split(' ')
        x = list[0]
        output(list)
        dict[n] = [int(x) for x in list[2:(-1)]]
        line = f.readline()
        n += 1
    ps = []
    for i in range(1, n):
        p = new(P)
        ps.append(p)
    
    output(dict)

    for (i, p) in enumerate(ps):
        ps_ids = []
        for x in dict[i + 1]:
            ps_ids.append(ps[(x - 1)])
        setup({p}, (i + 1, tuple(dict[i + 1]), tuple(ps_ids)))

    start(ps)
    
    await()
    
    for key in dict.keys():
        neigh = dict[key]
        if key in mis_list:
            if any(y in mis_list for y in neigh):
                print("the mis is not correct: 2 neighbors in ")
        else:
            if all(y not in mis_list for y in neigh):
                print(f"the mis is not correct: this one has no neighbors {key}")
    
    