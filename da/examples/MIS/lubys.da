import da
import sys
import random
import os
import copy
import time
import sys

nr_nodes = sys.argv[1]
which_graph = sys.argv[2]
which_run = sys.argv[3]

total_time_results_dir = f'/home/bianca/licenta/distalgo/da/examples/MIS/total_time_results/lubys'
node_time_results_dir = f'/home/bianca/licenta/distalgo/da/examples/MIS/node_time_results/lubys/{nr_nodes}/graph{which_graph}'

total_time_results_path = total_time_results_dir + f'/{nr_nodes}_total_time_results.txt'
node_time_results_path = node_time_results_dir + f'/run{which_run}_node_time_results.txt'


if not os.path.exists(total_time_results_dir):
    os.makedirs(total_time_results_dir)
    
if not os.path.exists(node_time_results_dir):
    os.makedirs(node_time_results_dir)

total_time_results = open(total_time_results_path, "a")
node_time_results = open(node_time_results_path, "a")
f = open(f"/home/bianca/licenta/distalgo/da/examples/MIS/graphs/{nr_nodes}/graph{which_graph}.txt")
config(handling = 'one', channel = 'reliable')


class Coordinator(process):
    def setup(nr_nodes:int):
        self.start = time.time()
        self.initial_neighbors = {}
        self.nodes = {}
        self.nr_nodes = nr_nodes
        self.mis = []
        self.keep_going = True
        self.round_nr = 0
        self.await_ack_from_nr = 0
        self.stop_times = {i : None for i in range(1, self.nr_nodes)}
        
    def run():
        await(len(setof(a, received(('hi', a, _, _)))) == self.nr_nodes - 1)
        
        self.start_time = time.time()
        while self.keep_going == True:
            self.await_ack_from_nr = len(list(self.nodes.keys()))
            self.keep_going = False
            
            self.round_nr += 1
            
            send(('start round', self.round_nr), to = list(self.nodes.values()))
            
            await(len(setof(a, received(('done', a, _, self.round_nr)))) == self.await_ack_from_nr)
            
        output(self.mis)
        
        self.stop = time.time()
        output(f"total time: {self.stop - self.start}")
        total_time_results.write(f"total time: {self.stop - self.start} graph : {which_graph} run : {which_run}\n")
        total_time_results.close()
        
        for index in self.stop_times.keys():
            node_time_results.write(f"{index} : {self.stop_times[index] - self.start_time}\n")
        node_time_results.close()
        
        for key in self.initial_neighbors.keys():
            all = False
            for value in self.initial_neighbors[key]:
                a = key in self.mis
                b = value in self.mis
                all = all or b
                if a and b:
                    output(f"THE MIS IS NOT RIGHT {self.mis} {key} {value}")
            if key not in self.mis and all == False:
                output(f"THE MIS IS NOT RIGHT: none of {key}'s neighbors ({self.initial_neighbors[key]}) is in the mis {self.mis}")

        
        
    def receive(msg = ('hi', index, id, neighbors)):
        self.nodes[index] = id
        self.initial_neighbors[index] = list(neighbors)
        
    def receive(msg = ('done', index, node_mis, round_nr)):
        if index not in list(self.nodes.keys()):
            return
        
        if node_mis == 'IN MIS':
            self.mis.append(index)
            
        if node_mis == 'IN MIS' or node_mis == 'NOT IN MIS':
            self.nodes.pop(index)
            self.stop_times[index] = time.time()
            
        if node_mis == 'NOT DECIDED':
            self.keep_going = True
        
class P(process):
    def setup(index: int, neighbors_indexes: tuple, neighbors_process_ids: tuple, coordinator:tuple):
        self.index = index
        self.neighbors = {neighbors_indexes[i] : neighbors_process_ids[i] for i in range(len(neighbors_indexes))}
        self.coordinator = coordinator
        self.MIS = 'NOT DECIDED'
        self.desire_marks = {}
        self.round_nr = 1
        self.received_mis = {}
        self.expect_confirmation_from = 0
        self.mis_from_neighbors = {key : None for key in self.neighbors.keys()}
        self.not_mis_from_neighbors = {key : None for key in self.neighbors.keys()}
        self.terminate = False
        
    def run():
        send(('hi', self.index, self, tuple(self.neighbors.keys())), to = self.coordinator)
        await(self.terminate == True)
        
    def receive(msg = ('start round', round_nr)):
        self.round_nr = round_nr
        self.expect_confirmation_from = len(list(self.neighbors.items()))
        
        if self.round_nr not in list(self.desire_marks.keys()):
            self.desire_marks[self.round_nr] = []
            
        if self.round_nr not in list(self.received_mis.keys()):
            self.received_mis[self.round_nr] = []
            
        if len(self.neighbors) == 0:
            self.desire_level = 1
        elif len(self.neighbors) == 1:
            self.desire_level = 2
        else:
            self.desire_level = len(self.neighbors)
            
        self.MIS = random.choices(['IN MIS', 'NOT DECIDED'], weights=[1 / self.desire_level, 1 - 1 / self.desire_level])[0]
        
        send(('desire_level + mark', self.desire_level, self.MIS, self.index, self.round_nr), to = list(self.neighbors.values()))
        await(each(p in list(self.neighbors.values()), has=received(('confirmation1', self.round_nr), from_= p)))
        
        await(len(self.desire_marks[self.round_nr]) == self.expect_confirmation_from)
        
        if self.MIS == "IN MIS":
            if len(list(filter(lambda x : x[1] == "IN MIS" and x[0] >= self.desire_level, self.desire_marks[self.round_nr]))) != 0:
                self.MIS = "NOT DECIDED"
            
        send(('i am in the mis', self.index, self.MIS, round_nr), to = list(self.neighbors.values()))
        await(each(p in list(self.neighbors.values()), has=received(('confirmation2', self.round_nr), from_= p)))
        
        await(len(setof(a, received(('i am in the mis', a, _, self.round_nr)))) == self.expect_confirmation_from)
        
        if 'IN MIS' in self.mis_from_neighbors.values():
            if self.MIS == "IN MIS":
                output("A GRAVE MISTAKE HAS BEEN MADE")
            self.MIS = 'NOT IN MIS'
        
        send(('i am not in the mis', self.MIS, self.index, round_nr), to = list(self.neighbors.values()))
        await(each(p in list(self.neighbors.values()), has=received(('confirmation3', self.round_nr), from_= p)))
        await(len(setof(a, received(('i am not in the mis', _, a, self.round_nr)))) == self.expect_confirmation_from)
        
        for (key, value) in list(self.not_mis_from_neighbors.items()):
            if value == 'NOT IN MIS':
                self.neighbors.pop(key)
        
        self.mis_from_neighbors = {key : None for key in self.neighbors.keys()}
        self.not_mis_from_neighbors = {key : None for key in self.neighbors.keys()}
        send(('done', self.index, self.MIS, self.round_nr), to = self.coordinator)
        if self.MIS != "NOT DECIDED":
            self.terminate = True
        
    def receive(msg = ('desire_level + mark', desire_level, mis, index, round_nr), from_ = source):
        if round_nr in list(self.desire_marks.keys()):
            self.desire_marks[round_nr].append([desire_level, mis, index])
        else:
            self.desire_marks[round_nr] = [[desire_level, mis, index]]
        
        send(('confirmation1', round_nr), to = source)
    
    def receive(msg = ('i am in the mis', index, mis, round_nr), from_ = source):
        self.mis_from_neighbors[index] = mis
            
        send(('confirmation2', round_nr), to = source)
        
    def receive(msg = ('i am not in the mis', mis, index, round_nr), from_ = source):
        self.not_mis_from_neighbors[index] = mis
                
        send(('confirmation3', round_nr), to = source)

def main():
    dict = {}
    line = f.readline()
    # indexing the nodes with 1
    n = 1
    while line:
        line = line.strip("\n")
        list = line.split(' ')
        x = list[0]
        dict[n] = [int(x) for x in list[2:(-1)]]
        line = f.readline()
        n += 1
    ps = []
    for i in range(1, n):
        p = new(P, method = 'thread')
        ps.append(p)
    
    
    coordinator = new(Coordinator)
    setup({coordinator}, (n,))
    start(coordinator)

    for (i, p) in enumerate(ps):
        ps_ids = []
        for x in dict[i + 1]:
            ps_ids.append(ps[(x - 1)])
        setup({p}, (i + 1, tuple(dict[i + 1]), tuple(ps_ids), coordinator))
        
    start(ps)