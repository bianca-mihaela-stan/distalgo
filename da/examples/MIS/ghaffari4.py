# -*- generated by 1.2.0b2 -*-
import da
PatternExpr_238 = da.pat.TuplePattern([da.pat.ConstantPattern('hi'), da.pat.FreePattern('a'), da.pat.FreePattern(None)])
PatternExpr_313 = da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.FreePattern('a'), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern322_')])
PatternExpr_355 = da.pat.TuplePattern([da.pat.ConstantPattern('hi'), da.pat.FreePattern('index'), da.pat.FreePattern('id')])
PatternExpr_373 = da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.FreePattern('index'), da.pat.FreePattern('node_mis'), da.pat.FreePattern('round_nr')])
PatternExpr_606 = da.pat.TuplePattern([da.pat.ConstantPattern('start round'), da.pat.FreePattern('round_nr')])
PatternExpr_830 = da.pat.TuplePattern([da.pat.ConstantPattern('confirmation1'), da.pat.BoundPattern('_BoundPattern836_')])
PatternExpr_839 = da.pat.BoundPattern('_BoundPattern840_')
PatternExpr_928 = da.pat.TuplePattern([da.pat.ConstantPattern('confirmation2'), da.pat.BoundPattern('_BoundPattern934_')])
PatternExpr_937 = da.pat.BoundPattern('_BoundPattern938_')
PatternExpr_957 = da.pat.TuplePattern([da.pat.ConstantPattern('i am in the mis'), da.pat.FreePattern('a'), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern966_')])
PatternExpr_1034 = da.pat.TuplePattern([da.pat.ConstantPattern('confirmation3'), da.pat.BoundPattern('_BoundPattern1040_')])
PatternExpr_1043 = da.pat.BoundPattern('_BoundPattern1044_')
PatternExpr_1063 = da.pat.TuplePattern([da.pat.ConstantPattern('i am not in the mis'), da.pat.FreePattern(None), da.pat.FreePattern('a'), da.pat.BoundPattern('_BoundPattern1072_')])
PatternExpr_1180 = da.pat.TuplePattern([da.pat.ConstantPattern('desire_level + mark'), da.pat.FreePattern('desire_level'), da.pat.FreePattern('mis'), da.pat.FreePattern('index'), da.pat.FreePattern('round_nr')])
PatternExpr_1193 = da.pat.FreePattern('source')
PatternExpr_1237 = da.pat.TuplePattern([da.pat.ConstantPattern('i am in the mis'), da.pat.FreePattern('index'), da.pat.FreePattern('mis'), da.pat.FreePattern('round_nr')])
PatternExpr_1248 = da.pat.FreePattern('source')
PatternExpr_1266 = da.pat.TuplePattern([da.pat.ConstantPattern('i am not in the mis'), da.pat.FreePattern('mis'), da.pat.FreePattern('index'), da.pat.FreePattern('round_nr')])
PatternExpr_1277 = da.pat.FreePattern('source')
PatternExpr_841 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern847_')]), da.pat.TuplePattern([da.pat.ConstantPattern('confirmation1'), da.pat.BoundPattern('_BoundPattern851_')])])
PatternExpr_939 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern945_')]), da.pat.TuplePattern([da.pat.ConstantPattern('confirmation2'), da.pat.BoundPattern('_BoundPattern949_')])])
PatternExpr_1045 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern1051_')]), da.pat.TuplePattern([da.pat.ConstantPattern('confirmation3'), da.pat.BoundPattern('_BoundPattern1055_')])])
_config_object = {'handling': 'one', 'channel': 'reliable'}
import da
import sys
import random
import os
import copy
import time
f = open('/home/bianca/distAlgo/distalgo/da/examples/MIS/graph4.txt')
f2 = open('/home/bianca/distAlgo/distalgo/da/examples/MIS/ghaffari_logs1.txt', 'w')

class Coordinator(da.DistProcess):

    def __init__(self, procimpl, forwarder, **props):
        super().__init__(procimpl, forwarder, **props)
        self._CoordinatorReceivedEvent_0 = []
        self._CoordinatorReceivedEvent_1 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_CoordinatorReceivedEvent_0', PatternExpr_238, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_CoordinatorReceivedEvent_1', PatternExpr_313, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_CoordinatorReceivedEvent_2', PatternExpr_355, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Coordinator_handler_354]), da.pat.EventPattern(da.pat.ReceivedEvent, '_CoordinatorReceivedEvent_3', PatternExpr_373, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Coordinator_handler_372])])

    def setup(self, nr_nodes, **rest_1475):
        super().setup(nr_nodes=nr_nodes, **rest_1475)
        self._state.nr_nodes = nr_nodes
        self._state.nodes = {}
        self._state.nr_nodes = self._state.nr_nodes
        self._state.mis = []
        self._state.keep_going = True
        self._state.round_nr = 0
        self._state.await_ack_from_nr = 0

    def run(self):
        super()._label('_st_label_233', block=False)
        _st_label_233 = 0
        while (_st_label_233 == 0):
            _st_label_233 += 1
            if (len({a for (_, _, (_ConstantPattern254_, a, _)) in self._CoordinatorReceivedEvent_0 if (_ConstantPattern254_ == 'hi')}) == (self._state.nr_nodes - 1)):
                _st_label_233 += 1
            else:
                super()._label('_st_label_233', block=True)
                _st_label_233 -= 1
        while (self._state.keep_going == True):
            self._state.await_ack_from_nr = len(list(self._state.nodes.keys()))
            self._state.keep_going = False
            self._state.round_nr += 1
            self.send(('start round', self._state.round_nr), to=list(self._state.nodes.values()))
            super()._label('_st_label_308', block=False)
            _st_label_308 = 0
            while (_st_label_308 == 0):
                _st_label_308 += 1
                if (len({a for (_, _, (_ConstantPattern333_, a, _, _BoundPattern337_)) in self._CoordinatorReceivedEvent_1 if (_ConstantPattern333_ == 'done') if (_BoundPattern337_ == self._state.round_nr)}) == self._state.await_ack_from_nr):
                    _st_label_308 += 1
                else:
                    super()._label('_st_label_308', block=True)
                    _st_label_308 -= 1
            else:
                if (_st_label_308 != 2):
                    continue
            if (_st_label_308 != 2):
                break
            self.output('received all done')
        self.output(self._state.mis)

    def _Coordinator_handler_354(self, index, id):
        self._state.nodes[index] = id
    _Coordinator_handler_354._labels = None
    _Coordinator_handler_354._notlabels = None

    def _Coordinator_handler_372(self, index, node_mis, round_nr):
        self.output(f'coordinator {self._state.round_nr}: received {node_mis} from {index}')
        if (not (index in list(self._state.nodes.keys()))):
            return
        if (node_mis == 'IN MIS'):
            self._state.mis.append(index)
        if ((node_mis == 'IN MIS') or (node_mis == 'NOT IN MIS')):
            self._state.nodes.pop(index)
        if (node_mis == 'NOT DECIDED'):
            self._state.keep_going = True
    _Coordinator_handler_372._labels = None
    _Coordinator_handler_372._notlabels = None

class P(da.DistProcess):

    def __init__(self, procimpl, forwarder, **props):
        super().__init__(procimpl, forwarder, **props)
        self._PReceivedEvent_1 = []
        self._PReceivedEvent_2 = []
        self._PReceivedEvent_3 = []
        self._PReceivedEvent_4 = []
        self._PReceivedEvent_5 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_0', PatternExpr_606, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_605]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_1', PatternExpr_830, sources=[PatternExpr_839], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_2', PatternExpr_928, sources=[PatternExpr_937], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_3', PatternExpr_957, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_4', PatternExpr_1034, sources=[PatternExpr_1043], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_5', PatternExpr_1063, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_6', PatternExpr_1180, sources=[PatternExpr_1193], destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_1179]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_7', PatternExpr_1237, sources=[PatternExpr_1248], destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_1236]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_8', PatternExpr_1266, sources=[PatternExpr_1277], destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_1265])])

    def setup(self, index, neighbors_indexes, neighbors_process_ids, coordinator, **rest_1475):
        super().setup(index=index, neighbors_indexes=neighbors_indexes, neighbors_process_ids=neighbors_process_ids, coordinator=coordinator, **rest_1475)
        self._state.index = index
        self._state.neighbors_indexes = neighbors_indexes
        self._state.neighbors_process_ids = neighbors_process_ids
        self._state.coordinator = coordinator
        self._state.index = self._state.index
        self._state.neighbors = {self._state.neighbors_indexes[i]: self._state.neighbors_process_ids[i] for i in range(len(self._state.neighbors_indexes))}
        self._state.coordinator = self._state.coordinator
        self._state.MIS = 'NOT DECIDED'
        self._state.desire_level = 0.5
        self._state.effective_degree = None
        self._state.desire_marks = {}
        self._state.round_nr = 1
        self._state.received_mis = {}
        self._state.expect_confirmation_from = 0
        self._state.mis_from_neighbors = {key: None for key in self._state.neighbors.keys()}
        self._state.not_mis_from_neighbors = {key: None for key in self._state.neighbors.keys()}
        self._state.terminate = False

    def run(self):
        self.send(('hi', self._state.index, self._id), to=self._state.coordinator)
        self.output(f'{self._state.index} : {self._state.neighbors}')
        super()._label('_st_label_597', block=False)
        _st_label_597 = 0
        while (_st_label_597 == 0):
            _st_label_597 += 1
            if (self._state.terminate == True):
                _st_label_597 += 1
            else:
                super()._label('_st_label_597', block=True)
                _st_label_597 -= 1

    def _P_handler_605(self, round_nr):
        self._state.round_nr = round_nr
        self._state.expect_confirmation_from = len(list(self._state.neighbors.items()))
        self.output(f'{self._state.index} : starting round {self._state.round_nr}')
        self.output(f'MIS FROM NEIGHBORS {self._state.mis_from_neighbors}')
        if (not (self._state.round_nr in list(self._state.desire_marks.keys()))):
            self._state.desire_marks[self._state.round_nr] = []
        if (not (self._state.round_nr in list(self._state.received_mis.keys()))):
            self._state.received_mis[self._state.round_nr] = []
        if ((self._state.round_nr - 1) in list(self._state.desire_marks.keys())):
            self._state.effective_degree = sum([x[0] for x in self._state.desire_marks[(self._state.round_nr - 1)]])
            if (self._state.effective_degree >= 2):
                self._state.desire_level = (self._state.desire_level / 2)
            else:
                self._state.desire_level = min((2 * self._state.desire_level), 0.5)
        self._state.MIS = random.choices(['IN MIS', 'NOT DECIDED'], weights=[self._state.desire_level, (1 - self._state.desire_level)])[0]
        self.send(('desire_level + mark', self._state.desire_level, self._state.MIS, self._state.index, self._state.round_nr), to=list(self._state.neighbors.values()))
        self.output(f'{self._state.index} : {list(self._state.neighbors.values())}')
        super()._label('_st_label_815', block=False)
        p = None

        def UniversalOpExpr_816():
            nonlocal p
            for p in list(self._state.neighbors.values()):
                if (not PatternExpr_841.match_iter(self._PReceivedEvent_1, _BoundPattern847_=p, _BoundPattern851_=self._state.round_nr, SELF_ID=self._id)):
                    return False
            return True
        _st_label_815 = 0
        while (_st_label_815 == 0):
            _st_label_815 += 1
            if UniversalOpExpr_816():
                _st_label_815 += 1
            else:
                super()._label('_st_label_815', block=True)
                _st_label_815 -= 1
        super()._label('_st_label_854', block=False)
        _st_label_854 = 0
        while (_st_label_854 == 0):
            _st_label_854 += 1
            if (len(self._state.desire_marks[self._state.round_nr]) == self._state.expect_confirmation_from):
                _st_label_854 += 1
            else:
                super()._label('_st_label_854', block=True)
                _st_label_854 -= 1
        if (('IN MIS' in [x[1] for x in self._state.desire_marks[self._state.round_nr]]) and (self._state.MIS == 'IN MIS')):
            self._state.MIS = 'NOT DECIDED'
        self.send(('i am in the mis', self._state.index, self._state.MIS, round_nr), to=list(self._state.neighbors.values()))
        super()._label('_st_label_914', block=False)
        p = None

        def UniversalOpExpr_915():
            nonlocal p
            for p in list(self._state.neighbors.values()):
                if (not PatternExpr_939.match_iter(self._PReceivedEvent_2, _BoundPattern945_=p, _BoundPattern949_=self._state.round_nr, SELF_ID=self._id)):
                    return False
            return True
        _st_label_914 = 0
        while (_st_label_914 == 0):
            _st_label_914 += 1
            if UniversalOpExpr_915():
                _st_label_914 += 1
            else:
                super()._label('_st_label_914', block=True)
                _st_label_914 -= 1
        super()._label('_st_label_952', block=False)
        _st_label_952 = 0
        while (_st_label_952 == 0):
            _st_label_952 += 1
            if (len({a for (_, _, (_ConstantPattern977_, a, _, _BoundPattern981_)) in self._PReceivedEvent_3 if (_ConstantPattern977_ == 'i am in the mis') if (_BoundPattern981_ == self._state.round_nr)}) == self._state.expect_confirmation_from):
                _st_label_952 += 1
            else:
                super()._label('_st_label_952', block=True)
                _st_label_952 -= 1
        if ('IN MIS' in self._state.mis_from_neighbors.values()):
            self._state.MIS = 'NOT IN MIS'
        self.send(('i am not in the mis', self._state.MIS, self._state.index, round_nr), to=list(self._state.neighbors.values()))
        super()._label('_st_label_1020', block=False)
        p = None

        def UniversalOpExpr_1021():
            nonlocal p
            for p in list(self._state.neighbors.values()):
                if (not PatternExpr_1045.match_iter(self._PReceivedEvent_4, _BoundPattern1051_=p, _BoundPattern1055_=self._state.round_nr, SELF_ID=self._id)):
                    return False
            return True
        _st_label_1020 = 0
        while (_st_label_1020 == 0):
            _st_label_1020 += 1
            if UniversalOpExpr_1021():
                _st_label_1020 += 1
            else:
                super()._label('_st_label_1020', block=True)
                _st_label_1020 -= 1
        super()._label('_st_label_1058', block=False)
        _st_label_1058 = 0
        while (_st_label_1058 == 0):
            _st_label_1058 += 1
            if (len({a for (_, _, (_ConstantPattern1083_, _, a, _BoundPattern1087_)) in self._PReceivedEvent_5 if (_ConstantPattern1083_ == 'i am not in the mis') if (_BoundPattern1087_ == self._state.round_nr)}) == self._state.expect_confirmation_from):
                _st_label_1058 += 1
            else:
                super()._label('_st_label_1058', block=True)
                _st_label_1058 -= 1
        for (key, value) in list(self._state.not_mis_from_neighbors.items()):
            if (value == 'NOT IN MIS'):
                self._state.neighbors.pop(key)
        self._state.mis_from_neighbors = {key: None for key in self._state.neighbors.keys()}
        self._state.not_mis_from_neighbors = {key: None for key in self._state.neighbors.keys()}
        self.send(('done', self._state.index, self._state.MIS, self._state.round_nr), to=self._state.coordinator)
        if (not (self._state.MIS == 'NOT DECIDED')):
            self._state.terminate = True
    _P_handler_605._labels = None
    _P_handler_605._notlabels = None

    def _P_handler_1179(self, desire_level, mis, index, round_nr, source):
        if (round_nr in list(self._state.desire_marks.keys())):
            self._state.desire_marks[round_nr].append([desire_level, mis, index])
        else:
            self._state.desire_marks[round_nr] = [[desire_level, mis, index]]
        self.send(('confirmation1', round_nr), to=source)
    _P_handler_1179._labels = None
    _P_handler_1179._notlabels = None

    def _P_handler_1236(self, index, mis, round_nr, source):
        self._state.mis_from_neighbors[index] = mis
        self.send(('confirmation2', round_nr), to=source)
    _P_handler_1236._labels = None
    _P_handler_1236._notlabels = None

    def _P_handler_1265(self, mis, index, round_nr, source):
        self._state.not_mis_from_neighbors[index] = mis
        self.send(('confirmation3', round_nr), to=source)
    _P_handler_1265._labels = None
    _P_handler_1265._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, forwarder, **props):
        super().__init__(procimpl, forwarder, **props)
        self._events.extend([])

    def run(self):
        start = time.time()
        dict = {}
        line = f.readline()
        n = 1
        while line:
            line = line.strip('\n')
            list = line.split(' ')
            x = list[0]
            self.output(list)
            dict[n] = [int(x) for x in list[2:(- 1)]]
            line = f.readline()
            n += 1
        ps = []
        for i in range(1, n):
            p = self.new(P, method='thread')
            ps.append(p)
        self.output(dict)
        coordinator = self.new(Coordinator)
        self._setup({coordinator}, (n,))
        self._start(coordinator)
        for (i, p) in enumerate(ps):
            ps_ids = []
            for x in dict[(i + 1)]:
                ps_ids.append(ps[(x - 1)])
            self._setup({p}, ((i + 1), tuple(dict[(i + 1)]), tuple(ps_ids), coordinator))
        self._start(ps)
        stop = time.time()
        self.output(f'TOTAL TIME {(stop - start)}')
        f2.write((stop - start))
